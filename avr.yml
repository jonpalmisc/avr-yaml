- id: 1
  mnem: add
  desc: Add without carry
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd + Rr
  pattern: 000011rdddddrrrr
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 2
  mnem: adc
  desc: Add with carry
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd + Rr + C
  pattern: 000111rdddddrrrr
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 3
  mnem: adiw
  desc: Add immediate to word
  type: math
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd+1:Rd + K
  pattern: 10010110KKddKKKK
  flags:
  - Z
  - C
  - N
  - V
  - S
  words: 1

- id: 4
  mnem: sub
  desc: Subtract without carry
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd - Rr
  pattern: 000110rdddddrrrr
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 5
  mnem: subi
  desc: Subtract immediate
  type: math
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd - K
  pattern: 0101KKKKddddKKKK
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 6
  mnem: sbc
  desc: Subtract with carry
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd - Rr - C
  pattern: 000010rdddddrrrr
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 7
  mnem: sbci
  desc: Subtract immediate with carry
  type: math
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd - K - C
  pattern: 0100KKKKddddKKKK
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 8
  mnem: sbiw
  desc: Subtract immediate from word
  type: math
  ops:
  - Rd
  - K
  lhs:
  - Rd+1:Rd
  op:
  - set
  rhs:
  - Rd+1:Rd - K
  pattern: 10010111KKddKKKK
  flags:
  - Z
  - C
  - N
  - V
  - S
  words: 1

- id: 9
  mnem: and
  desc: Logical AND
  type: logic
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd & Rr
  pattern: 001000rdddddrrrr
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 10
  mnem: andi
  desc: Logical AND with immediate
  type: logic
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd & K
  pattern: 0111KKKKddddKKKK
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 11
  mnem: or
  desc: Logical OR
  type: logic
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd | Rr
  pattern: 001010rdddddrrrr
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 12
  mnem: ori
  desc: Logical OR with immediate
  type: logic
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd | K
  pattern: 0110KKKKddddKKKK
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 13
  mnem: eor
  desc: Exclusive OR
  type: logic
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd ^ Rr
  pattern: 001001rdddddrrrr
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 14
  mnem: com
  desc: "One\u2019s complement"
  type: logic
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - $FF - Rd
  pattern: 1001010ddddd0000
  flags:
  - Z
  - C
  - N
  - V
  - S
  words: 1

- id: 15
  mnem: neg
  desc: "Two\u2019s complement"
  type: logic
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - $00 - Rd
  pattern: 1001010ddddd0001
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 16
  mnem: sbr
  desc: Set bit(s) in register
  type: logic
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd | K
  pattern: 0110KKKKddddKKKK
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 17
  mnem: cbr
  desc: Clear bit(s) in register
  type: logic
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd & ($FF - K)
  pattern: 0111KKKKddddKKKK
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 18
  mnem: inc
  desc: Increment
  type: math
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd + 1
  pattern: 1001010ddddd0011
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 19
  mnem: dec
  desc: Decrement
  type: math
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd - 1
  pattern: 1001010ddddd1010
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 20
  mnem: tst
  desc: Test for zero or minus
  type: logic
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd && Rd
  pattern: 001000dddddddddd
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 21
  mnem: clr
  desc: Clear register
  type: logic
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rd ^ Rd
  pattern: 001001dddddddddd
  flags:
  - Z
  - N
  - V
  - S
  words: 1

- id: 22
  mnem: ser
  desc: Set register
  type: logic
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - $FF
  pattern: 11101111dddd1111
  flags: null
  words: 1

- id: 23
  mnem: mul
  desc: Multiply unsigned
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - R1:R0
  op:
  - set
  rhs:
  - Rd * Rr (UU)
  pattern: 100111rdddddrrrr
  flags:
  - Z
  - C
  words: 1

- id: 24
  mnem: muls
  desc: Multiply signed
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - R1:R0
  op:
  - set
  rhs:
  - Rd * Rr (SS)
  pattern: 00000010ddddrrrr
  flags:
  - Z
  - C
  words: 1

- id: 25
  mnem: mulsu
  desc: Multiply signed with unsigned
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - R1:R0
  op:
  - set
  rhs:
  - Rd * Rr (SU)
  pattern: 000000110ddd0rrr
  flags:
  - Z
  - C
  words: 1

- id: 26
  mnem: fmul
  desc: Fractional multiply unsigned
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - R1:R0
  op:
  - set
  rhs:
  - Rd * Rr << 1 (UU)
  pattern: 000000110ddd1rrr
  flags:
  - Z
  - C
  words: 1

- id: 27
  mnem: fmuls
  desc: Fractional multiply signed
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - R1:R0
  op:
  - set
  rhs:
  - Rd * Rr << 1 (SS)
  pattern: 000000111ddd0rrr
  flags:
  - Z
  - C
  words: 1

- id: 28
  mnem: fmulsu
  desc: Fractional multiply signed with unsigned
  type: math
  ops:
  - Rd
  - Rr
  lhs:
  - R1:R0
  op:
  - set
  rhs:
  - Rd * Rr << 1 (SU)
  pattern: 000000111ddd1rrr
  flags:
  - Z
  - C
  words: 1

- id: 29
  mnem: des
  desc: Data encryption
  type: crypto
  ops:
  - K
  lhs:
  - if (H == 0) R15:R0
  - if (H == 1) R15:R0
  op:
  - set
  - set
  rhs:
  - 'Encrypt(R15: R0, K)'
  - 'Decrypt(R15: R0, K)'
  pattern: 10010100KKKK1011
  flags: null
  words: 1

- id: 30
  mnem: rjmp
  desc: Relative jump
  type: branch
  ops:
  - k
  lhs:
  - PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 1100kkkkkkkkkkkk
  flags: null
  words: 1

- id: 31
  mnem: ijmp
  desc: Indirect jump to (Z)
  type: branch
  ops: null
  lhs:
  - PC(15:0)
  - PC(21:16)
  op:
  - set
  - set
  rhs:
  - Z
  - '0'
  pattern: '1001010000001001'
  flags: null
  words: 1

- id: 32
  mnem: eijmp
  desc: Extended indirect jump to (Z)
  type: branch
  ops: null
  lhs:
  - PC(15:0)
  - PC(21:16)
  op:
  - set
  - set
  rhs:
  - Z
  - EIND
  pattern: '1001010000011001'
  flags: null
  words: 1

- id: 33
  mnem: jmp
  desc: Jump
  type: branch
  ops:
  - k
  lhs:
  - PC
  op:
  - set
  rhs:
  - k
  pattern: 1001010kkkkk110kkkkkkkkkkkkkkkkk
  flags: null
  words: 2

- id: 34
  mnem: rcall
  desc: Relative call subroutine
  type: branch
  ops:
  - k
  lhs:
  - PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 1101kkkkkkkkkkkk
  flags: null
  words: 1

- id: 35
  mnem: icall
  desc: Indirect call to (Z)
  type: branch
  ops: null
  lhs:
  - PC(15:0)
  - PC(21:16)
  op:
  - set
  - set
  rhs:
  - Z
  - '0'
  pattern: '1001010100001001'
  flags: null
  words: 1

- id: 36
  mnem: eicall
  desc: Extended indirect call to (Z)
  type: branch
  ops: null
  lhs:
  - PC(15:0)
  - PC(21:16)
  op:
  - set
  - set
  rhs:
  - Z
  - EIND
  pattern: '1001010100011001'
  flags: null
  words: 1

- id: 37
  mnem: call
  desc: Call subroutine
  type: branch
  ops:
  - k
  lhs:
  - PC
  op:
  - set
  rhs:
  - k
  pattern: 1001010kkkkk111kkkkkkkkkkkkkkkkk
  flags: null
  words: 2

- id: 38
  mnem: ret
  desc: Subroutine return
  type: branch
  ops: null
  lhs:
  - PC
  op:
  - set
  rhs:
  - STACK
  pattern: '1001010100001000'
  flags: null
  words: 1

- id: 39
  mnem: reti
  desc: Interrupt return
  type: branch
  ops: null
  lhs:
  - PC
  op:
  - set
  rhs:
  - STACK
  pattern: '1001010100011000'
  flags:
  - I
  words: 1

- id: 40
  mnem: cpse
  desc: Compare, skip if equal
  type: branch
  ops:
  - Rd
  - Rr
  lhs:
  - if (Rd == Rr) PC
  op:
  - set
  rhs:
  - PC + (2 or 3)
  pattern: 000100rdddddrrrr
  flags: null
  words: 1

- id: 41
  mnem: cp
  desc: Compare
  type: branch
  ops:
  - Rd
  - Rr
  lhs:
  - Rd - Rr
  op: null
  rhs: null
  pattern: 000101rdddddrrrr
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 42
  mnem: cpc
  desc: Compare with carry
  type: branch
  ops:
  - Rd
  - Rr
  lhs:
  - Rd - Rr - C
  op: null
  rhs: null
  pattern: 000001rdddddrrrr
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 43
  mnem: cpi
  desc: Compare with immediate
  type: branch
  ops:
  - Rd
  - K
  lhs:
  - Rd - K
  op: null
  rhs: null
  pattern: 0011KKKKddddKKKK
  flags:
  - Z
  - C
  - N
  - V
  - S
  - H
  words: 1

- id: 44
  mnem: sbrc
  desc: Skip if bit in register cleared
  type: branch
  ops:
  - Rr
  - b
  lhs:
  - if (Rr(b) == 0) PC
  op:
  - set
  rhs:
  - PC + (2 or 3)
  pattern: 1111110rrrrr0bbb
  flags: null
  words: 1

- id: 45
  mnem: sbrs
  desc: Skip if bit in register set
  type: branch
  ops:
  - Rr
  - b
  lhs:
  - if (Rr(b) == 1) PC
  op:
  - set
  rhs:
  - PC + (2 or 3)
  pattern: 1111111rrrrr0bbb
  flags: null
  words: 1

- id: 46
  mnem: sbic
  desc: Skip if bit in I/O register cleared
  type: branch
  ops:
  - A
  - b
  lhs:
  - if (IO(A, b) == 0) PC
  op:
  - set
  rhs:
  - PC + (2 or 3)
  pattern: 10011001AAAAAbbb
  flags: null
  words: 1

- id: 47
  mnem: sbis
  desc: Skip if bit in I/O register set
  type: branch
  ops:
  - A
  - b
  lhs:
  - If (IO(A, b) == 1) PC
  op:
  - set
  rhs:
  - PC + (2 or 3)
  pattern: 10011011AAAAAbbb
  flags: null
  words: 1

- id: 48
  mnem: brbs
  desc: Branch if status flag set
  type: branch
  ops:
  - s
  - k
  lhs:
  - if (SREG(s) == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkksss
  flags: null
  words: 1

- id: 49
  mnem: brbc
  desc: Branch if status flag cleared
  type: branch
  ops:
  - s
  - k
  lhs:
  - if (SREG(s) == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkksss
  flags: null
  words: 1

- id: 50
  mnem: breq
  desc: Branch if equal
  type: branch
  ops:
  - k
  lhs:
  - if (Z == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk001
  flags: null
  words: 1

- id: 51
  mnem: brne
  desc: Branch if not equal
  type: branch
  ops:
  - k
  lhs:
  - if (Z == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk001
  flags: null
  words: 1

- id: 52
  mnem: brcs
  desc: Branch if carry set
  type: branch
  ops:
  - k
  lhs:
  - if (C == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk000
  flags: null
  words: 1

- id: 53
  mnem: brcc
  desc: Branch if carry cleared
  type: branch
  ops:
  - k
  lhs:
  - if (C == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk000
  flags: null
  words: 1

- id: 54
  mnem: brsh
  desc: Branch if same or higher
  type: branch
  ops:
  - k
  lhs:
  - if (C == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk000
  flags: null
  words: 1

- id: 55
  mnem: brlo
  desc: Branch if lower
  type: branch
  ops:
  - k
  lhs:
  - if (C == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk000
  flags: null
  words: 1

- id: 56
  mnem: brmi
  desc: Branch if minus
  type: branch
  ops:
  - k
  lhs:
  - if (N == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk010
  flags: null
  words: 1

- id: 57
  mnem: brpl
  desc: Branch if plus
  type: branch
  ops:
  - k
  lhs:
  - if (N == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk010
  flags: null
  words: 1

- id: 58
  mnem: brge
  desc: Branch if greater or equal, signed
  type: branch
  ops:
  - k
  lhs:
  - if (N ^ V == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk100
  flags: null
  words: 1

- id: 59
  mnem: brlt
  desc: Branch if less than, signed
  type: branch
  ops:
  - k
  lhs:
  - if (N ^ V == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk100
  flags: null
  words: 1

- id: 60
  mnem: brhs
  desc: Branch if half carry flag set
  type: branch
  ops:
  - k
  lhs:
  - if (H == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk101
  flags: null
  words: 1

- id: 61
  mnem: brhc
  desc: Branch if half carry flag cleared
  type: branch
  ops:
  - k
  lhs:
  - if (H == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk101
  flags: null
  words: 1

- id: 62
  mnem: brts
  desc: Branch if T flag set
  type: branch
  ops:
  - k
  lhs:
  - if (T == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk110
  flags: null
  words: 1

- id: 63
  mnem: brtc
  desc: branch if T flag cleared
  type: branch
  ops:
  - k
  lhs:
  - if (T == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk110
  flags: null
  words: 1

- id: 64
  mnem: brvs
  desc: Branch if overflow flag is set
  type: branch
  ops:
  - k
  lhs:
  - if (V == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk011
  flags: null
  words: 1

- id: 65
  mnem: brvc
  desc: Branch if overflow flag is cleared
  type: branch
  ops:
  - k
  lhs:
  - if (V == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk011
  flags: null
  words: 1

- id: 66
  mnem: brie
  desc: Branch if interrupt enabled
  type: branch
  ops:
  - k
  lhs:
  - if (I == 1) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111100kkkkkkk111
  flags: null
  words: 1

- id: 67
  mnem: brid
  desc: Branch if interrupt disabled
  type: branch
  ops:
  - k
  lhs:
  - if (I == 0) PC
  op:
  - set
  rhs:
  - PC + k + 1
  pattern: 111101kkkkkkk111
  flags: null
  words: 1

- id: 68
  mnem: mov
  desc: Copy register
  type: data
  ops:
  - Rd
  - Rr
  lhs:
  - Rd
  op:
  - set
  rhs:
  - Rr
  pattern: 001011rdddddrrrr
  flags: null
  words: 1

- id: 69
  mnem: movw
  desc: Copy register pair
  type: data
  ops:
  - Rd
  - Rr
  lhs:
  - Rd+1:Rd
  op:
  - set
  rhs:
  - Rr+1:Rr
  pattern: 00000001ddddrrrr
  flags: null
  words: 1

- id: 70
  mnem: ldi
  desc: Load immediate
  type: data
  ops:
  - Rd
  - K
  lhs:
  - Rd
  op:
  - set
  rhs:
  - K
  pattern: 1110KKKKddddKKKK
  flags: null
  words: 1

- id: 71
  mnem: lds
  desc: Load direct from data space
  type: data
  ops:
  - Rd
  - k
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (k)
  pattern: 1001000ddddd0000kkkkkkkkkkkkkkkk
  flags: null
  words: 2

- id: 72
  mnem: ld
  desc: Load indirect
  type: data
  ops:
  - Rd
  - X
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (X)
  pattern: 1001000ddddd1100
  flags: null
  words: 1

- id: 73
  mnem: ld
  desc: Load indirect and post-increment
  type: data
  ops:
  - Rd
  - X+
  lhs:
  - Rd
  - X
  op:
  - set
  - set
  rhs:
  - (X)
  - X + 1
  pattern: 1001000ddddd1101
  flags: null
  words: 1

- id: 74
  mnem: ld
  desc: Load indirect and pre-decrement
  type: data
  ops:
  - Rd
  - -X
  lhs:
  - X
  - Rd
  op:
  - set
  - set
  rhs:
  - X - 1
  - (X)
  pattern: 1001000ddddd1110
  flags: null
  words: 1

- id: 75
  mnem: ld
  desc: Load indirect
  type: data
  ops:
  - Rd
  - Y
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (Y)
  pattern: 1000000ddddd1000
  flags: null
  words: 1

- id: 76
  mnem: ld
  desc: Load indirect and post-increment
  type: data
  ops:
  - Rd
  - Y+
  lhs:
  - Rd
  - Y
  op:
  - set
  - set
  rhs:
  - (Y)
  - Y + 1
  pattern: 1001000ddddd1001
  flags: null
  words: 1

- id: 77
  mnem: ld
  desc: Load indirect and pre-decrement
  type: data
  ops:
  - Rd
  - -Y
  lhs:
  - Y
  - Rd
  op:
  - set
  - set
  rhs:
  - Y - 1
  - (Y)
  pattern: 1001000ddddd1010
  flags: null
  words: 1

- id: 78
  mnem: ldd
  desc: Load indirect with displacement
  type: data
  ops:
  - Rd
  - Y+q
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (Y + q)
  pattern: 1001000ddddd0010
  flags: null
  words: 1

- id: 79
  mnem: ld
  desc: Load indirect
  type: data
  ops:
  - Rd
  - Z
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (Z)
  pattern: 10q0qq0ddddd1qqq
  flags: null
  words: 1

- id: 80
  mnem: ld
  desc: Load indirect and post-increment
  type: data
  ops:
  - Rd
  - Z+
  lhs:
  - Rd
  - Z
  op:
  - set
  - set
  rhs:
  - (Z)
  - Z+1
  pattern: 1000000ddddd0000
  flags: null
  words: 1

- id: 81
  mnem: ld
  desc: Load indirect and pre-decrement
  type: data
  ops:
  - Rd
  - -Z
  lhs:
  - Z
  - Rd
  op:
  - set
  - set
  rhs:
  - Z - 1
  - (Z)
  pattern: 1001000ddddd0001
  flags: null
  words: 1

- id: 82
  mnem: ldd
  desc: Load indirect with displacement
  type: data
  ops:
  - Rd
  - Z+q
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (Z + q)
  pattern: 10q0qq0ddddd0qqq
  flags: null
  words: 1

- id: 83
  mnem: sts
  desc: Store direct to data space
  type: data
  ops:
  - k
  - Rr
  lhs:
  - (k)
  op:
  - set
  rhs:
  - Rd
  pattern: 1001001ddddd0000kkkkkkkkkkkkkkkk
  flags: null
  words: 2

- id: 84
  mnem: st
  desc: Store indirect
  type: data
  ops:
  - X
  - Rr
  lhs:
  - (X)
  op:
  - set
  rhs:
  - Rr
  pattern: 1001001rrrrr1100
  flags: null
  words: 1

- id: 85
  mnem: st
  desc: Store indirect and post-increment
  type: data
  ops:
  - X+
  - Rr
  lhs:
  - (X)
  - X
  op:
  - set
  - set
  rhs:
  - Rr
  - X + 1
  pattern: 1001001rrrrr1101
  flags: null
  words: 1

- id: 86
  mnem: st
  desc: Store indirect and pre-decrement
  type: data
  ops:
  - -X
  - Rr
  lhs:
  - X
  - (X)
  op:
  - set
  - set
  rhs:
  - X - 1
  - Rr
  pattern: 1001001rrrrr1110
  flags: null
  words: 1

- id: 87
  mnem: st
  desc: Store indirect
  type: data
  ops:
  - Y
  - Rr
  lhs:
  - (Y)
  op:
  - set
  rhs:
  - Rr
  pattern: 1000001rrrrr1000
  flags: null
  words: 1

- id: 88
  mnem: st
  desc: Store indirect and post-increment
  type: data
  ops:
  - Y+
  - Rr
  lhs:
  - (Y)
  - Y
  op:
  - set
  - set
  rhs:
  - Rr
  - Y + 1
  pattern: 1001001rrrrr1001
  flags: null
  words: 1

- id: 89
  mnem: st
  desc: Store indirect and pre-decrement
  type: data
  ops:
  - -Y
  - Rr
  lhs:
  - Y
  - (Y)
  op:
  - set
  - set
  rhs:
  - Y - 1
  - Rr
  pattern: 1001001rrrrr1010
  flags: null
  words: 1

- id: 90
  mnem: std
  desc: Store indirect with displacement
  type: data
  ops:
  - Y+q
  - Rr
  lhs:
  - (Y+q)
  op:
  - set
  rhs:
  - Rr
  pattern: 10q0qq1rrrrr1qqq
  flags: null
  words: 1

- id: 91
  mnem: st
  desc: Store indirect
  type: data
  ops:
  - Z
  - Rr
  lhs:
  - (Z)
  op:
  - set
  rhs:
  - Rr
  pattern: 1000001rrrrr0000
  flags: null
  words: 1

- id: 92
  mnem: st
  desc: Store indirect and post-increment
  type: data
  ops:
  - Z+
  - Rr
  lhs:
  - (Z)
  - Z
  op:
  - set
  - set
  rhs:
  - Rr
  - Z + 1
  pattern: 1001001rrrrr0001
  flags: null
  words: 1

- id: 93
  mnem: st
  desc: Store indirect and pre-decrement
  type: data
  ops:
  - -Z
  - Rr
  lhs:
  - Z
  op:
  - set
  rhs:
  - Z - 1
  pattern: 1001001rrrrr0010
  flags: null
  words: 1

- id: 94
  mnem: std
  desc: Store indirect with displacement
  type: data
  ops:
  - Z+q
  - Rr
  lhs:
  - (Z+q)
  op:
  - set
  rhs:
  - Rr
  pattern: 10q0qq1rrrrr0qqq
  flags: null
  words: 1

- id: 95
  mnem: lpm
  desc: Load program memory
  type: data
  ops: null
  lhs:
  - R0
  op:
  - set
  rhs:
  - (Z)
  pattern: '1001010111001000'
  flags: null
  words: 1

- id: 96
  mnem: lpm
  desc: Load program memory
  type: data
  ops:
  - Rd
  - Z
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (Z)
  pattern: 1001000ddddd0100
  flags: null
  words: 1

- id: 97
  mnem: lpm
  desc: Load program memory and post-increment
  type: data
  ops:
  - Rd
  - Z+
  lhs:
  - Rd
  - Z
  op:
  - set
  - set
  rhs:
  - (Z)
  - Z + 1
  pattern: 1001000ddddd0101
  flags: null
  words: 1

- id: 98
  mnem: elpm
  desc: Extended load program memory
  type: data
  ops: null
  lhs:
  - R0
  op:
  - set
  rhs:
  - (RAMPZ:Z)
  pattern: '1001010111011000'
  flags: null
  words: 1

- id: 99
  mnem: elpm
  desc: Extended load program memory
  type: data
  ops:
  - Rd
  - Z
  lhs:
  - Rd
  op:
  - set
  rhs:
  - (RAMPZ:Z)
  pattern: 1001000ddddd0110
  flags: null
  words: 1

- id: 100
  mnem: elpm
  desc: Extended load program memory and post-increment
  type: data
  ops:
  - Rd
  - Z+
  lhs:
  - Rd
  - (RAMPZ:Z)
  op:
  - set
  - set
  rhs:
  - (RAMPZ:Z)
  - (RAMPZ:Z) + 1
  pattern: 1001000ddddd0111
  flags: null
  words: 1

- id: 101
  mnem: spm
  desc: Store program memory
  type: data
  ops: null
  lhs:
  - (RAMPZ:Z)
  op:
  - set
  rhs:
  - R1:R0
  pattern: '1001010111101000'
  flags: null
  words: 1

- id: 102
  mnem: spm
  desc: Store program memory and post-increment by 2
  type: data
  ops:
  - Z+
  lhs:
  - (RAMPZ:Z)
  - Z
  op:
  - set
  - set
  rhs:
  - R1:R0
  - Z + 2
  pattern: '1001010111111000'
  flags: null
  words: 1

- id: 103
  mnem: in
  desc: In from I/O location
  type: data
  ops:
  - Rd
  - A
  lhs:
  - Rd
  op:
  - set
  rhs:
  - IO(A)
  pattern: 10110AAdddddAAAA
  flags: null
  words: 1

- id: 104
  mnem: out
  desc: Out to I/O location
  type: data
  ops:
  - A
  - Rr
  lhs:
  - IO(A)
  op:
  - set
  rhs:
  - Rr
  pattern: 10111AArrrrrAAAA
  flags: null
  words: 1

- id: 105
  mnem: push
  desc: Push register on stack
  type: data
  ops:
  - Rr
  lhs:
  - STACK
  op:
  - set
  rhs:
  - Rr
  pattern: 1001001ddddd1111
  flags: null
  words: 1

- id: 106
  mnem: pop
  desc: Pop register from stack
  type: data
  ops:
  - Rd
  lhs:
  - Rd
  op:
  - set
  rhs:
  - STACK
  pattern: 1001000ddddd1111
  flags: null
  words: 1

- id: 107
  mnem: xch
  desc: Exchange
  type: data
  ops:
  - Z
  - Rd
  lhs:
  - (Z)
  - Rd
  op:
  - set
  - set
  rhs:
  - Rd
  - (Z)
  pattern: 1001001rrrrr0100
  flags: null
  words: 1

- id: 108
  mnem: las
  desc: Load and set
  type: data
  ops:
  - Z
  - Rd
  lhs:
  - (Z)
  - Rd
  op:
  - set
  - set
  rhs:
  - Rd | (Z)
  - (Z)
  pattern: 1001001rrrrr0101
  flags: null
  words: 1

- id: 109
  mnem: lac
  desc: Load and clear
  type: data
  ops:
  - Z
  - Rd
  lhs:
  - (Z)
  - Rd
  op:
  - set
  - set
  rhs:
  - ($FF - Rd) & (Z)
  - (Z)
  pattern: 1001001rrrrr0110
  flags: null
  words: 1

- id: 110
  mnem: lat
  desc: Load and toggle
  type: data
  ops:
  - Z
  - Rd
  lhs:
  - (Z)
  - Rd
  op:
  - set
  - set
  rhs:
  - Rd ^ (Z)
  - (Z)
  pattern: 1001001rrrrr0111
  flags: null
  words: 1

- id: 111
  mnem: lsl
  desc: Logical shift left
  type: bits
  ops:
  - Rd
  lhs:
  - Rd(n + 1)
  - Rd(0)
  - C
  op:
  - set
  - set
  - set
  rhs:
  - Rd(n)
  - '0'
  - Rd(7)
  pattern: 000011dddddddddd
  flags:
  - Z
  - C
  - N
  - V
  - H
  words: 1

- id: 112
  mnem: lsr
  desc: Logical shift right
  type: bits
  ops:
  - Rd
  lhs:
  - Rd(n)
  - Rd(7)
  - C
  op:
  - set
  - set
  - set
  rhs:
  - Rd(n + 1)
  - '0'
  - Rd(0)
  pattern: 1001010ddddd0110
  flags:
  - Z
  - C
  - N
  - V
  words: 1

- id: 113
  mnem: rol
  desc: Rotate left through carry
  type: bits
  ops:
  - Rd
  lhs:
  - Rd(0)
  - Rd(n + 1)
  - C
  op:
  - set
  - set
  - set
  rhs:
  - C
  - Rd(n)
  - Rd(7)
  pattern: 000111dddddddddd
  flags:
  - Z
  - C
  - N
  - V
  - H
  words: 1

- id: 114
  mnem: ror
  desc: Rotate right through carry
  type: bits
  ops:
  - Rd
  lhs:
  - Rd(7)
  - Rd(n)
  - C
  op:
  - set
  - set
  - set
  rhs:
  - C
  - Rd(n + 1)
  - Rd(0)
  pattern: 1001010ddddd0111
  flags:
  - Z
  - C
  - N
  - V
  words: 1

- id: 115
  mnem: asr
  desc: Arithmetic shift right
  type: bits
  ops:
  - Rd
  lhs:
  - Rd(n)
  op:
  - set
  rhs:
  - Rd(n + 1), n=0..6
  pattern: 1001010ddddd0101
  flags:
  - Z
  - C
  - N
  - V
  words: 1

- id: 116
  mnem: swap
  desc: Swap nibbles
  type: bits
  ops:
  - Rd
  lhs:
  - Rd(3..0)
  op:
  - swap
  rhs:
  - Rd(7..4)
  pattern: 1001010ddddd0010
  flags: null
  words: 1

- id: 117
  mnem: sbi
  desc: Set bit in I/O register
  type: bits
  ops:
  - A
  - b
  lhs:
  - IO(A, b)
  op:
  - set
  rhs:
  - '1'
  pattern: 10011010AAAAAbbb
  flags: null
  words: 1

- id: 118
  mnem: cbi
  desc: Clear bit in I/O register
  type: bits
  ops:
  - A
  - b
  lhs:
  - IO(A, b)
  op:
  - set
  rhs:
  - '0'
  pattern: 10011000AAAAAbbb
  flags: null
  words: 1

- id: 119
  mnem: bst
  desc: Bit store from register to T
  type: bits
  ops:
  - Rr
  - b
  lhs:
  - T
  op:
  - set
  rhs:
  - Rr(b)
  pattern: 1111101ddddd0bbb
  flags:
  - T
  words: 1

- id: 120
  mnem: bld
  desc: Bit load from T to register
  type: bits
  ops:
  - Rd
  - b
  lhs:
  - Rd(b)
  op:
  - set
  rhs:
  - T
  pattern: 1111100ddddd0bbb
  flags: null
  words: 1

- id: 121
  mnem: bset
  desc: Flag set
  type: bits
  ops:
  - s
  lhs:
  - SREG(s)
  op:
  - set
  rhs:
  - '1'
  pattern: 100101000sss1000
  flags:
  - SREG(s)
  words: 1

- id: 122
  mnem: bclr
  desc: Flag clear
  type: bits
  ops:
  - s
  lhs:
  - SREG(s)
  op:
  - set
  rhs:
  - '0'
  pattern: 100101001sss1000
  flags:
  - SREG(s)
  words: 1

- id: 123
  mnem: sec
  desc: Set carry
  type: bits
  ops: null
  lhs:
  - C
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010000001000'
  flags:
  - C
  words: 1

- id: 124
  mnem: clc
  desc: Clear carry
  type: bits
  ops: null
  lhs:
  - C
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010010001000'
  flags:
  - C
  words: 1

- id: 125
  mnem: sen
  desc: Set negative flag
  type: bits
  ops: null
  lhs:
  - N
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010000101000'
  flags:
  - N
  words: 1

- id: 126
  mnem: cln
  desc: Clear negative flag
  type: bits
  ops: null
  lhs:
  - N
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010010101000'
  flags:
  - N
  words: 1

- id: 127
  mnem: sez
  desc: Set zero flag
  type: bits
  ops: null
  lhs:
  - Z
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010000011000'
  flags:
  - Z
  words: 1

- id: 128
  mnem: clz
  desc: Clear zero flag
  type: bits
  ops: null
  lhs:
  - Z
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010010011000'
  flags:
  - Z
  words: 1

- id: 129
  mnem: sei
  desc: Global interrupt enable
  type: bits
  ops: null
  lhs:
  - I
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010001111000'
  flags:
  - I
  words: 1

- id: 130
  mnem: cli
  desc: Global interrupt disable
  type: bits
  ops: null
  lhs:
  - I
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010011111000'
  flags:
  - I
  words: 1

- id: 131
  mnem: ses
  desc: Set signed test flag
  type: bits
  ops: null
  lhs:
  - S
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010001001000'
  flags:
  - S
  words: 1

- id: 132
  mnem: cls
  desc: Clear signed test flag
  type: bits
  ops: null
  lhs:
  - S
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010011001000'
  flags:
  - S
  words: 1

- id: 133
  mnem: sev
  desc: "Set two\u2019s complement overflow"
  type: bits
  ops: null
  lhs:
  - V
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010000111000'
  flags:
  - V
  words: 1

- id: 134
  mnem: clv
  desc: "Clear two\u2019s complement overflow"
  type: bits
  ops: null
  lhs:
  - V
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010010111000'
  flags:
  - V
  words: 1

- id: 135
  mnem: set
  desc: Set T in SREG
  type: bits
  ops: null
  lhs:
  - T
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010001101000'
  flags:
  - T
  words: 1

- id: 136
  mnem: clt
  desc: Clear T in SREG
  type: bits
  ops: null
  lhs:
  - T
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010011101000'
  flags:
  - T
  words: 1

- id: 137
  mnem: seh
  desc: Set half carry flag in SREG
  type: bits
  ops: null
  lhs:
  - H
  op:
  - set
  rhs:
  - '1'
  pattern: '1001010001011000'
  flags:
  - H
  words: 1

- id: 138
  mnem: clh
  desc: Clear half carry flag in SREG
  type: bits
  ops: null
  lhs:
  - H
  op:
  - set
  rhs:
  - '0'
  pattern: '1001010011011000'
  flags:
  - H
  words: 1

- id: 139
  mnem: break
  desc: Break
  type: mcu
  ops: null
  lhs: null
  op: null
  rhs: null
  pattern: '1001010110011000'
  flags: null
  words: 1

- id: 140
  mnem: nop
  desc: No operation
  type: mcu
  ops: null
  lhs: null
  op: null
  rhs: null
  pattern: '0000000000000000'
  flags: null
  words: 1

- id: 141
  mnem: sleep
  desc: Sleep
  type: mcu
  ops: null
  lhs: null
  op: null
  rhs: null
  pattern: '1001010110001000'
  flags: null
  words: 1

- id: 142
  mnem: wdr
  desc: Watchdog reset
  type: mcu
  ops: null
  lhs: null
  op: null
  rhs: null
  pattern: '1001010110101000'
  flags: null
  words: 1
